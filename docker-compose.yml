services:
  db:
    image: postgres:14.1-alpine
    container_name: indexer-db
    restart: always
    environment:
      - POSTGRES_USER=indexer
      - POSTGRES_PASSWORD=indexer
      - POSTGRES_DB=indexer
    volumes: 
      - ./database/:/var/lib/postgresql/data
    command: >
      -c work_mem=2GB
      -c max_wal_size=4GB  
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U indexer"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - postgres

  graphql-engine:
      image: hasura/graphql-engine:latest
      container_name: indexer-hasura
      ports:
      - "8080:8080"
      depends_on:
      - "db"
      restart: always
      environment:
        HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
        HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup
        HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://indexer:indexer@db/postgres
        HASURA_GRAPHQL_DATABASE_URL: postgresql://indexer:indexer@db/indexer
        HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_PASSWORD}
      networks:
        - postgres  

  eth-indexer:
    container_name: eth-indexer
    image: ghcr.io/eabz/evm-indexer:latest
    restart: on-failure
    environment:
      - DATABASE_URL=postgresql://indexer:indexer@db/indexer
    env_file:
      - .env
    command: "evm-indexer --provider ankr"
    networks:
      - postgres
    depends_on:
      db:
        condition: service_healthy   

  polygon-indexer:
    container_name: polygon-indexer
    image: ghcr.io/eabz/evm-indexer:latest
    restart: on-failure
    environment:
      - DATABASE_URL=postgresql://indexer:indexer@db/indexer
    env_file:
      - .env
    command: "evm-indexer --chain polygon --provider ankr"
    networks:
      - postgres
    depends_on:
      db:
        condition: service_healthy   

  fantom-indexer:
    container_name: fantom-indexer
    image: ghcr.io/eabz/evm-indexer:latest
    restart: on-failure
    environment:
      - DATABASE_URL=postgresql://indexer:indexer@db/indexer
    env_file:
      - .env
    command: "evm-indexer --chain fantom  --provider ankr"
    networks:
      - postgres
    depends_on:
      db:
        condition: service_healthy           

  optimism-indexer:
    container_name: optimism-indexer
    image: ghcr.io/eabz/evm-indexer:latest
    restart: on-failure
    environment:
      - DATABASE_URL=postgresql://indexer:indexer@db/indexer
    env_file:
      - .env
    command: "evm-indexer --chain optimism  --provider ankr"
    networks:
      - postgres
    depends_on:
      db:
        condition: service_healthy               

  arbitrum-indexer:
    container_name: arbitrum-indexer
    image: ghcr.io/eabz/evm-indexer:latest
    restart: on-failure
    environment:
      - DATABASE_URL=postgresql://indexer:indexer@db/indexer
    env_file:
      - .env
    command: "evm-indexer --chain arbitrum  --provider ankr"
    networks:
      - postgres
    depends_on:
      db:
        condition: service_healthy      

networks:
  postgres:
    driver: bridge